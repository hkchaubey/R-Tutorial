mydata2 <- sqldf("select * from storedata where order by Profit" )
print(mydata2)
storedata <- data.frame(
Store = paste("s",sample(1:3, 15 ,replace = TRUE), sep = ""),
Productclass = sample(1:2, 15 ,replace = TRUE),
Month = sample(1:3 , 15 , replace = TRUE),
Sales = runif(15)*100,
Profit = runif(15)*5)
print(storedata)
mydata2 <- sqldf("select * from storedata where order by Profit" )
print(mydata2)
mydata2 <- sqldf("select * from storedata  order by Profit" )
print(mydata2)
mydata2 <- sqldf("select * from storedata  order by Profit , order by Sales" )
print(mydata2)
mydata2 <- sqldf("select * from storedata  order by Profit , Sales" )
print(mydata2)
View(mydata)
mydata = data.frame(state=sample(c('Delhi' , 'Goa') , 25, replace = FALSE),
Q1= sample(1:25))
mydata = data.frame(state=sample(c('Delhi' , 'Goa') , 25, replace = TRUE),
Q1= sample(1:25))
View(mydata)
source('C:/Users/lenovo/Desktop/Data Analytics/R/Run SQL Queries in R.R')
source('C:/Users/lenovo/Desktop/Data Analytics/R/Run SQL Queries in R.R')
mydata9 <- filter(sampledata, Index=="A")
head(mydata9)
library(reshape2)
library(dplyr)
sampledata <- read.csv("C:/Users/lenovo/Desktop/Data Analytics/R/Data/sampledata.csv")
mydata9 <- filter(sampledata, Index=="A")
head(mydata9)
x <- 13:29
print (x)
y1 <- x[1]
print(y1)
y2 <- x[1:4]
print(y2)
y4 <- x[c(1,3,5,7)]
print(y4)
y5<- x[8:14]
print(y5)
y6 <-x[-2]
print(y6)
y7 <- x[(-2:-6)]
print (y7)
y8<- x[c(-2,-6)]
print(y8)
mylist$retired
mylist <- list(name = c("ram" , "rahim") , age = c(69,76) , retired = c(TRUE , FALSE))
mylist$retired
mylist$name
mylist[[3]]
mylist[[1]][2]
list <- c(c(2,4),4,5)
print (list)
list [[1]][2]
mydata <- data.frame(x= c(1:5,NA),
y= c(1,1,0,0,NA,0),
z= 5*c(1:6))
View(mydata)
maxvalue <- NULL
for (i in 1:ncol(mydata)){
maxvalue[i]=max(mydata[i],na.rm = TRUE)
print(maxvalue[i])
}
print(maxvalue[i])
i=1
while(i<7)
{
print(i)
i=i+1
}
mydata <- data.frame(x= c(1:5,NA),
y= c(1,1,0,0,NA,0),
z= 5*c(1:6))
apply(mydata , 1, mean , na.rm = TRUE)
apply(mydata , 2, mean , na.rm = TRUE)
View(mydata)
mydata <- data.frame(x= c(1:5),
y= c(1,1,0,0,0),
z= 5*c(1:5))
View(mydata)
lapply(mydata , function(a)  a+1)
print (mydata)
ldata = list(x = 1:5 , y = 6:10 , z = 11:15)
print(ldata)
lapply(ldata , fun=max , na.rm=TRUE)
lapply(ldata , FUN=max , na.rm=TRUE)
sapply(mydata, function(a) a+1)
sapply(ldata , FUN= sum , na.rm=TRUE)
midwest <- read.csv("http://goo.gl/G1K41K")
library(datasets)
mydata <- data.frame(Titanic)
head(mydata)
tapply(mydata$Freq , mydata$Age , sum , na.rm=TRUE)
tapply(mydata$Freq , mydata$Class , sum , na.rm=TRUE)
x = "Himanshu"
y = "chaubey"
paste(x ,y)
midwest <- read.csv("http://goo.gl/G1K41K")
View(midwest)
x = "Himanshu"
y = "chaubey"
paste(x ,y)
paste(x ,y , sep = ",")
x= "abcdef"
substr(x , 2 , 3)
x= "abcdef"
substr(x , 3 , 3)
x= "abcdef"
substr(x , 3 , 6)
x= "abcdef"
substr(x , 6 , 3)
substr (x , 1 , 2) = "11"
print(x)
x = "i love R programming"
nchar (x)
x = "ilove R programming"
nchar (x)
x = "i love R__programming"
nchar (x)
x = "I love_ R__programming"
nchar (x)
install.packages("stringr")
library(stringr)
x = "I love_ R__programming"
library(stringr)
word(x , 1, sep = " ")
x = "I love R programming"
library(stringr)
word(x , 1, sep = " ")
word(x , 2, sep = " ")
word(x , 3, sep = " ")
word(x , 4, sep = " ")
word(x , -1, sep = " ")
word(x , -2, sep = " ")
word(x , -3, sep = " ")
word(x , -4, sep = " ")
word(x , -1, sep = "")
word(x , -1, sep = "")
x = "I love Rprogramming"
word(x , -1, sep = "")
tolower(x)
toupper(x)
#proper case
str_to_title(x)
x = "I love R programming"
tolower(x)
toupper(x)
#proper case
str_to_title(x)
tolower(x)
toupper(x)
#proper case
str_to_title(x)
a = "Himanshu  chaubey"
trimws(a)
a = "Himanshu    chaubey"
trimws(a)
a = "Himanshu chaubey"
trimws(a)
a = "Himanshu chaubey , "
trimws(a)
a = "Himanshu chaubey "
trimws(a)
install.packages("qdap")
x = "     Himanshu    chaubey   "
library(qdap)
Trim(clean(x))
squareit = function(x)
{
square <- x*x
return(square)
}
View(squareit)
View(squareit)
View(squareit)
View(squareit)
View(squareit)
View(squareit)
View(squareit)
z <- squareit(20)
print(z)
newfunction <- function(x,y)
{
square <- x*x
double <- 2*y
#save both result in a list and return
final <- list(square , double)
return(final)
}
View(newfunction)
outcome <- newfunction( 10 , 20)
print(outcome)
newfunction <- function(x,y,z)
{
square <- x*x
double <- 2*y
quabe <- z*z*z
#save both result in a list and return
final <- list(square , double , quabe)
return(final)
}
#call function and save result in a list object call outcome
outcome <- newfunction( 10 , 20,5)
print(outcome)
outcome[[1]]
install.packages(c("formattable", "ggplot2"))
install.packages(c("formattable", "ggplot2"))
library(ggplot2)
install.packages("formattable")
library(formattable)
storedata <- data.frame(
Store = paste("s",sample(1:3, 15 ,replace = TRUE), sep = ""),
Productclass = sample(1:2, 15 ,replace = TRUE),
Month = sample(1:3 , 15 , replace = TRUE),
Sales = runif(15)*100,
Profit = runif(15)*5)
View(storedata)
table(storedata$Store)
table(storedata$Store , storedata$Productclass)
table(storedata$Store , storedata$Productclass , storedata$Month)
mytable <-table(storedata$Store , storedata$Productclass)
mytable <- table(storedata$Store)
mytable <- table(storedata$Store , storedata$Productclass)
mytable <- table(storedata$Store , storedata$Productclass , storedata$Month)
mytable <- table(storedata$Store)
mytable1 <- table(storedata$Store , storedata$Productclass)
mytable2 <- table(storedata$Store , storedata$Productclass , storedata$Month)
mytable <- table(storedata$Store)
mytable <- table(storedata$Store , storedata$Productclass)
mytable <- table(storedata$Store , storedata$Productclass , storedata$Month)
mytable <- table(storedata$Store)
mytable <- table(storedata$Store , storedata$Productclass)
mytable <- table(storedata$Store , storedata$Productclass , storedata$Month)
mytable <- table(storedata$Store)
mytable <- table(storedata$Store , storedata$Productclass)
mytable <- table(storedata$Store , storedata$Productclass , storedata$Month)
margin.table(mytable , 1)
margin.table(mytable , 2)
margin.table(mytable , c(1,2))
prop.table(mytable) #cell percentage
prop.table(mytable,1) # Row per
prop.table(mytable,2)
aggeregate(Sales ~Store , data= storedata, FUN = mean)
aggregate(Sales ~Store , data= storedata, FUN = mean)
aggregate(Sales ~Store+Month , data= storedata, FUN = mean)
aggeregate(Sales ~Store+Month+ProductClass , data= storedata, FUN = mean)
aggregate(Sales ~Store+Month+ProductClass , data= storedata, FUN = mean)
aggregate(Sales ~Store+Month+Productclass , data= storedata, FUN = mean)
aggregate(cbind(Sales,Profit) ~Store , data= storedata, FUN = mean)
aggregate(cbind(Sales,Profit) ~Store , data= storedata, FUN = max)
library(ggplot2)
midwest <- read.csv("http://goo.gl/G1K41K")
View(midwest)
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
plot(g)
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
plot(g)
g1 <- g + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
plot(g1)
g2 <- g1 + labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
plot(g2)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
library(ggplot2)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
View(midwest)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
theme_set(theme_classic())
gg
gg + theme_bw() + labs(subtitle="BW Theme")
gg + theme_classic() + labs(subtitle="Classic Theme")
df <- data.frame(group = c("Male", "Female", "Child"),value = c(17, 7, 12))
print(df)
pie <- ggplot(df, aes(x="", y=value, fill=group))
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + scale_fill_brewer("Blues")
plot(pie)
pie = pie + theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank())
plot(pie)
library(formattable)
pie = pie + geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/sum(value),0)), size=4)
plot(pie)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal))
ggplot(midwest, aes(x=area, y=poptotal)) + geom_point()
g <- ggplot(midwest, aes(x=area, y=poptotal)) + geom_point() + geom_smooth(method="lm")
plot(g)
g1 <- g + xlim(c(0, 0.1)) + ylim(c(0, 1000000))
plot(g1)
g2 <- g1 + labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
plot(g2)
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point() +
geom_smooth(method="lm") +
coord_cartesian(xlim=c(0,0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(col="steelblue", size=3) +   # Set static color and size for points
geom_smooth(method="lm", col="firebrick") +  # change the color of line
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
plot(gg)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state), size=3) +  # Set color to vary based on state categories.
geom_smooth(method="lm", col="firebrick", size=2) +
coord_cartesian(xlim=c(0, 0.1), ylim=c(0, 1000000)) +
labs(title="Area Vs Population", y="Population", x="Area", caption="Midwest Demographics")
theme_set(theme_classic())
gg
gg + theme_bw() + labs(subtitle="BW Theme")
gg + theme_classic() + labs(subtitle="Classic Theme")
df <- data.frame(group = c("Male", "Female", "Child"),value = c(17, 7, 12))
print(df)
pie <- ggplot(df, aes(x="", y=value, fill=group))
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + scale_fill_brewer("Blues")
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + geom_bar(width = 1, stat = "identity") + coord_polar("y", start=0)
plot(pie)
pie = pie + theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank())
plot(pie)
pie = pie + theme(axis.text.x=element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank())
plot(pie)
library(formattable)
pie = pie + geom_text(aes(y = value/3 + c(0, cumsum(value)[-length(value)]),
label = percent(value/sum(value),0)), size=4)
plot(pie)
df <- data.frame(dose=c("D0", "D1", "D2"), len=c(4.2, 10, 29.5))
print(df)
plot(pie)
p + coord_flip()
ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity", width=0.5)
p + coord_flip()
p <-ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity")
plot(p)
p + coord_flip()
ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity", color="blue", fill="gray")
ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal()
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(df, aes(x=dose, y=len, fill=dose)) + geom_bar(stat="identity")+theme_minimal()
df2 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
print(df2)
ggplot(data=df, aes(x=dose, y=len)) + geom_bar(stat="identity", fill="steelblue") + theme_minimal()
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=-0.3, size=3.5)+
theme_minimal()
ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(df, aes(x=dose, y=len, fill=dose)) + geom_bar(stat="identity")+theme_minimal()
df2 <- data.frame(supp=rep(c("VC", "OJ"), each=3),
dose=rep(c("D0", "D1", "D2"),2),
len=c(6.8, 15, 33, 4.2, 10, 29.5))
print(df2)
ggplot(data=df2, aes(x=dose, y=len, fill=supp)) + geom_bar(stat="identity")
ggplot(data=df2, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity", position=position_dodge())
ggplot(data=df2, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity", color="black", position=position_dodge())+
theme_minimal()
ggplot(data=df2, aes(x=dose, y=len, fill=supp)) +
geom_bar(stat="identity", position=position_dodge())+
geom_text(aes(label=len), vjust=1.6, color="white",
position = position_dodge(0.9), size=3.5)+
scale_fill_brewer(palette="Paired")+
theme_minimal()
library(ggplot2)
ToothGrowth <- ToothGrowth
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
head(ToothGrowth)
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()
plot(p)
View(ToothGrowth)
p <- ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot()
plot(p)
p + coord_flip()
ggplot(ToothGrowth, aes(x=dose, y=len)) + geom_boxplot(notch=TRUE)
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(outlier.colour="red", outlier.shape=8,
outlier.size=4)
p + stat_summary(fun.y=mean, geom="point", shape=23, size=4)
p <- ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) + geom_boxplot()
plot(p)
p + stat_summary(fun.y=mean, geom="point", shape=23, size=4)
p <- ggplot(ToothGrowth, aes(x=dose, y=len, color=dose)) + geom_boxplot()
plot(p)
ggplot(ToothGrowth, aes(x=dose, y=len)) +
geom_boxplot(fill='#A4A4A4', color="black")+
theme_classic()
p <-ggplot(ToothGrowth, aes(x=dose, y=len, fill=dose)) + geom_boxplot()
plot(p)
ggplot(ToothGrowth, aes(x=dose, y=len, fill=supp)) + geom_boxplot()
p <- ggplot(ToothGrowth, aes(x=dose, y=len, fill=supp)) +
geom_boxplot(position=position_dodge(1))
plot(p)
df <- data.frame(sex=factor(rep(c("F", "M"), each=200)),
weight=round(c(rnorm(200, mean=55, sd=5), rnorm(200, mean=65, sd=5))))
head(df)
ggplot(df, aes(x=weight)) + geom_histogram()
ggplot(df, aes(x=weight)) + geom_histogram(binwidth=1)
View(df)
ggplot(df, aes(x=weight)) + geom_histogram()
ggplot(df, aes(x=weight)) + geom_histogram()
ggplot(df, aes(x=weight)) + geom_histogram(binwidth=1)
p <-ggplot(df, aes(x=weight)) + geom_histogram(color="black", fill="blue")
plot(p)
p+ geom_vline(aes(xintercept=mean(weight)),
color="black", linetype="dashed", size=1)
ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity")
p <-ggplot(df, aes(x=weight, fill=sex, color=sex)) +
geom_histogram(position="identity", alpha=0.5)
plot(p)
df <- data.frame(dose=c("D0", "D1", "D2"), len=c(4.2, 10, 29.5))
print(df)
View(df)
ggplot(data=df, aes(x=dose, y=len, group=1)) + geom_line() + geom_point()
ggplot(data=df, aes(x=dose, y=len, group=1)) +
geom_line(linetype = "dashed")+
geom_point()
ggplot(data=df, aes(x=dose, y=len, group=1)) +
geom_line(color="red")+
geom_point()
df2 <- data.frame(Store=rep(c("S1", "S2"), each=3),
QTR=rep(c("Q1", "Q2", "Q3"),2),
Sales=c(6.8, 15, 33, 4.2, 10, 29.5))
View(df2)
ggplot(data=df2, aes(x=QTR, y=Sales, group=Store)) +
geom_line()+
geom_point()
ggplot(data=df2, aes(x=QTR, y=Sales, group=Store)) +
geom_line(linetype="dashed", color="blue", size=1.2)+
geom_point(color="red", size=3)
p = ggplot(data=df2, aes(x=QTR, y=Sales, group=Store)) +
geom_line(aes(color=Store))+
geom_point(aes(color=Store))
plot(p)
